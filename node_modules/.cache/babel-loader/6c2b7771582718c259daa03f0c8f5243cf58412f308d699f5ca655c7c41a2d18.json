{"ast":null,"code":"var _jsxFileName = \"/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Dictionary.js\",\n  _s = $RefreshSig$();\n//import Header from '../components/Header';\nimport React, { useState } from 'react';\n//Helpful link on hooks and calls https://stackoverflow.com/questions/34424845/adding-script-tag-to-react-jsx\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Dictionary = () => {\n  _s();\n  const [formData, setFormData] = useState({\n    kanji: ''\n  });\n  const handleSubmit = x => {\n    x.preventDefault();\n    console.log('Form submitted:', formData);\n    process(formData);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dictionaryContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"kanjiInput\",\n        children: \" Enter Kanji : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"kanjiInput\",\n        value: formData.kanji,\n        onChange: e => setFormData({\n          kanji: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Search \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"outputKanji\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 9\n  }, this);\n};\n_s(Dictionary, \"7EBMU1XXTAMHPtl/YVUZivfxL5w=\");\n_c = Dictionary;\nconst process = async formData => {\n  const submit = formData.kanji;\n  const options = {\n    method: 'GET',\n    headers: {\n      'X-RapidAPI-Key': '6a12f8c88cmsh830de894db5186bp10d491jsnfd2c65de1956',\n      'X-RapidAPI-Host': 'kanjialive-api.p.rapidapi.com'\n    }\n  };\n  const url = 'https://kanjialive-api.p.rapidapi.com/api/public/kanji/';\n  const uri = url.concat(submit);\n  console.log(url); //const encoded = encodeURI(url);\n  try {\n    const response = await fetch(uri, options);\n    const result = await response.json();\n    if (!response.ok) {\n      let outputElement = document.getElementById(\"output\");\n      let err = \"Please type a valid character.\";\n      outputElement.innerHTML = err;\n    } else {\n      let outputElement = document.getElementById(\"outputKanji\");\n      let kanji = result.ka_utf; //kanji character\n      let on = result.onyomi_ja; //chinese reading\n      let kun = result.kunyomi_ka_display; // japanese reading\n      let examples = result.examples; //words that it is in \n      let related_words = \" \"; //words that it is in \n      let defintion = result.kanji.meaning.english; //english meaning\n      //let strokes = result.kanji.strokes;\n      let hint = result.mn_hint;\n      let rad = result.radical.character;\n      let radMeaning = result.radical.meaning.english;\n      console.log(defintion);\n      for (let word in examples) {\n        //I am putting this if statement in because sometimes the \n        //use cases of words would start like *kanji it was weird\n        //again no documentation so IDK\n        if (examples[word].japanese.substring(0, 1) === \"*\") {\n          //related_words += examples[word].japanese.substring(1);\n        } else {\n          related_words += \"<br> \";\n          related_words += examples[word].japanese;\n          related_words += examples[word].meaning.english;\n        }\n      }\n      //Some hints would have this message...maybe because some kanji are ONLY \n      //a radical so I just made it so there is no hint -- may change later \n      //console.log(hint.substring(0,6));\n      if (hint.substring(0, 6) === \"Please\") {\n        hint = \"No hint avaliable for this kanji.\";\n      }\n      let wordDes = ` \n                <div id= \"kanji\">${kanji}</div>\n                <p id= \"def\">  Meaning: ${defintion}</p>\n                <p id= \"on\"> On reading: ${on}</p>\n                <p id= \"kun\"> Kun reading: ${kun}</p> \n                <p id= \"relate\"> Words with this character: ${related_words}</p>\n                <p id= \"rad\"> Radicals: ${rad} ${radMeaning}</p> \n                <p id= \"hint\"> Hint: ${hint}</p> \n                `; //template string\n      console.log(wordDes);\n      outputElement.innerHTML = wordDes;\n    }\n  } catch (error) {\n    console.error(error);\n    let outputElement = document.getElementById(\"outputKanji\");\n    outputElement.innerHTML = \"failed\";\n  }\n};\nexport default Dictionary;\nvar _c;\n$RefreshReg$(_c, \"Dictionary\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Dictionary","_s","formData","setFormData","kanji","handleSubmit","x","preventDefault","console","log","process","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","e","target","_c","submit","options","method","headers","url","uri","concat","response","fetch","result","json","ok","outputElement","document","getElementById","err","innerHTML","ka_utf","on","onyomi_ja","kun","kunyomi_ka_display","examples","related_words","defintion","meaning","english","hint","mn_hint","rad","radical","character","radMeaning","word","japanese","substring","wordDes","error","$RefreshReg$"],"sources":["/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Dictionary.js"],"sourcesContent":["//import Header from '../components/Header';\nimport React, {useState} from 'react';\n//Helpful link on hooks and calls https://stackoverflow.com/questions/34424845/adding-script-tag-to-react-jsx\n\n\nconst Dictionary = () => {\n    const [formData, setFormData] = useState({\n        kanji: ''\n    });\n    const handleSubmit = (x) => {\n        x.preventDefault();\n        console.log('Form submitted:', formData);\n        process(formData);\n    };\n    return (    \n        <div className=\"dictionaryContainer\">\n            <form onSubmit={handleSubmit}>\n                <label htmlFor=\"kanjiInput\"> Enter Kanji : </label>\n                <input\n                    type=\"text\"\n                    id=\"kanjiInput\"\n                    value={formData.kanji}\n                    onChange={(e) => setFormData({ kanji: e.target.value })}\n                />\n                <button type=\"submit\"> Search </button>\n            </form>\n            <div id=\"outputKanji\">\n            </div>\n        </div>\n    );\n}\n\nconst process = async(formData) => {\n    const submit = formData.kanji;\n    const options = {\n    method: 'GET',\n    headers: {\n        'X-RapidAPI-Key': '6a12f8c88cmsh830de894db5186bp10d491jsnfd2c65de1956',\n        'X-RapidAPI-Host': 'kanjialive-api.p.rapidapi.com'\n    }\n    };\n        const url = 'https://kanjialive-api.p.rapidapi.com/api/public/kanji/'; \n        const uri = url.concat(submit); \n        console.log(url); //const encoded = encodeURI(url);\n        try {\n            const response = await fetch(uri, options);\n            const result = await response.json();\n            if(!response.ok){\n                let outputElement = document.getElementById(\"output\");\n                let err = \"Please type a valid character.\"\n                outputElement.innerHTML = err;\n            }\n            else{\n\n                let outputElement = document.getElementById(\"outputKanji\");\n                let kanji = result.ka_utf; //kanji character\n                let on = result.onyomi_ja; //chinese reading\n                let kun = result.kunyomi_ka_display; // japanese reading\n                let examples = result.examples; //words that it is in \n                let related_words = \" \";//words that it is in \n                let defintion = result.kanji.meaning.english; //english meaning\n                //let strokes = result.kanji.strokes;\n                let hint = result.mn_hint;\n                let rad = result.radical.character;\n                let radMeaning = result.radical.meaning.english;\n                console.log(defintion);\n\n                for (let word in examples){\n                    //I am putting this if statement in because sometimes the \n                    //use cases of words would start like *kanji it was weird\n                    //again no documentation so IDK\n                    if(examples[word].japanese.substring(0,1) === \"*\"){\n                        //related_words += examples[word].japanese.substring(1);\n                    }\n                    else{\n                        related_words += \"<br> \";\n                        related_words += examples[word].japanese;\n                        related_words += examples[word].meaning.english;\n                    }\n                }\n                //Some hints would have this message...maybe because some kanji are ONLY \n                //a radical so I just made it so there is no hint -- may change later \n               //console.log(hint.substring(0,6));\n                if(hint.substring(0,6) === \"Please\"){\n                    hint = \"No hint avaliable for this kanji.\";\n                }\n\n                let wordDes = ` \n                <div id= \"kanji\">${kanji}</div>\n                <p id= \"def\">  Meaning: ${defintion}</p>\n                <p id= \"on\"> On reading: ${on}</p>\n                <p id= \"kun\"> Kun reading: ${kun}</p> \n                <p id= \"relate\"> Words with this character: ${related_words}</p>\n                <p id= \"rad\"> Radicals: ${rad} ${radMeaning}</p> \n                <p id= \"hint\"> Hint: ${hint}</p> \n                `; //template string\n                console.log(wordDes);\n                outputElement.innerHTML = wordDes;\n            }\n        }\n        catch (error) {\n            console.error(error);\n            let outputElement = document.getElementById(\"outputKanji\");\n            outputElement.innerHTML = \"failed\";\n        }\n}\n\nexport default Dictionary;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}