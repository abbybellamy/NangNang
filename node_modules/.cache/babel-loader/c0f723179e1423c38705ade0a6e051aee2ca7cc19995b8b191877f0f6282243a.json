{"ast":null,"code":"var _jsxFileName = \"/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\n//const fs = require('fs');\nimport kanjiText from './kanji.json';\n//console.log(kanjiText);\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst About = () => {\n  _s();\n  var map = {};\n  map[\"本\"] = \"木 'tree' , 一 'cut through'\";\n  initializeSet();\n  const [formData, setFormData] = useState({\n    kanji: ''\n  });\n  const handleSubmit = x => {\n    x.preventDefault();\n    console.log('Form submitted:', formData);\n    helper(formData, map);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"about\",\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"kanjiInput\",\n        children: \" Enter Kanji : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"kanjiInput\",\n        value: formData.kanji,\n        onChange: e => setFormData({\n          kanji: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Search \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(About, \"7EBMU1XXTAMHPtl/YVUZivfxL5w=\");\n_c = About;\nconst initializeSet = () => {\n  //https://stackoverflow.com/questions/8877666/how-is-a-javascript-hash-map-implemented \n  //hash map ^\n  var map = new Map([]);\n  // map[\"本\"] = \"木 'tree' , 一 'cut through'\";\n  var count = 0;\n  for (var i in kanjiText) {\n    //set up the hash set from kanji.json\n    map.set(i, i.defs);\n  }\n};\nconst helper = async (formData, map) => {\n  const submit = formData.kanji;\n  //get from txt file \n  if (submit in map) {\n    //call API on that kanji\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '6a12f8c88cmsh830de894db5186bp10d491jsnfd2c65de1956',\n        'X-RapidAPI-Host': 'kanjialive-api.p.rapidapi.com'\n      }\n    };\n    //print stuff to html\n    const url = 'https://kanjialive-api.p.rapidapi.com/api/public/kanji/';\n    const uri = url.concat(submit);\n    console.log(url); //const encoded = encodeURI(url);\n    try {\n      const response = await fetch(uri, options);\n      const result = await response.json();\n      if (!response.ok) {\n        let outputElement = document.getElementById(\"output\");\n        let err = \"Please type a valid character.\";\n        outputElement.innerHTML = err;\n      } else {\n        let outputElement = document.getElementById(\"outputKanji\");\n        let on = result.onyomi_ja; //chinese reading\n        let defintion = result.kanji.meaning.english;\n        let kun = result.kunyomi_ka_display; // japanese reading\n        let words = result.examples; //words that it is in \n        let examples = \"\";\n        for (var x in words) {\n          var max = 5;\n          examples += x;\n          max++;\n        }\n        let wordDes = ` \n                <p id= \"def\">  Meaning: ${defintion}</p>\n                <p id= \"on\"> On reading: ${on}</p>\n                <p id= \"kun\"> Kun reading: ${kun}</p> \n                <p id= \"relate\"> Words with this character: ${examples}</p>\n                `; //template string\n        console.log(wordDes);\n        outputElement.innerHTML = wordDes;\n      }\n    } catch (error) {\n      console.log(\"there was malfunction\");\n    }\n  } else {\n    console.log(\"Not in base set\");\n  }\n  //store in the cache  \n};\nexport default About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useState","useEffect","kanjiText","jsxDEV","_jsxDEV","About","_s","map","initializeSet","formData","setFormData","kanji","handleSubmit","x","preventDefault","console","log","helper","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","e","target","_c","Map","count","i","set","defs","submit","options","method","headers","url","uri","concat","response","fetch","result","json","ok","outputElement","document","getElementById","err","innerHTML","on","onyomi_ja","defintion","meaning","english","kun","kunyomi_ka_display","words","examples","max","wordDes","error","$RefreshReg$"],"sources":["/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Learn.js"],"sourcesContent":["import React, {useState, useEffect} from 'react';\n//const fs = require('fs');\nimport kanjiText from './kanji.json';\n//console.log(kanjiText);\nconst About = () => {\n    var map = {};\n    map[\"本\"] = \"木 'tree' , 一 'cut through'\";\n    initializeSet();\n    const [formData, setFormData] = useState({\n        kanji: ''\n    });\n\n    const handleSubmit = (x) => {\n        x.preventDefault();\n        console.log('Form submitted:', formData);\n        helper(formData, map);\n    };\n    return (    \n        <div className = \"about\">\n             <form onSubmit={handleSubmit}>\n                <label htmlFor=\"kanjiInput\"> Enter Kanji : </label>\n                <input\n                    type=\"text\"\n                    id=\"kanjiInput\"\n                    value={formData.kanji}\n                    onChange={(e) => setFormData({ kanji: e.target.value })}\n                />\n                <button type=\"submit\"> Search </button>\n            </form>\n        </div>\n    );\n}\n\nconst initializeSet = () => {\n    //https://stackoverflow.com/questions/8877666/how-is-a-javascript-hash-map-implemented \n    //hash map ^\n    var map = new Map([]);\n    // map[\"本\"] = \"木 'tree' , 一 'cut through'\";\n    var count = 0;\n    for(var i in kanjiText){\n        //set up the hash set from kanji.json\n        map.set(i, i.defs);\n    }\n}\n\nconst helper = async(formData, map) => {\n    const submit = formData.kanji;\n    //get from txt file \n    if(submit in map){\n        //call API on that kanji\n        const options = {\n            method: 'GET',\n            headers: {\n                'X-RapidAPI-Key': '6a12f8c88cmsh830de894db5186bp10d491jsnfd2c65de1956',\n                'X-RapidAPI-Host': 'kanjialive-api.p.rapidapi.com'\n            }\n        };\n        //print stuff to html\n        const url = 'https://kanjialive-api.p.rapidapi.com/api/public/kanji/'; \n        const uri = url.concat(submit); \n        console.log(url); //const encoded = encodeURI(url);\n        try {\n            const response = await fetch(uri, options);\n            const result = await response.json();\n            if(!response.ok){\n                let outputElement = document.getElementById(\"output\");\n                let err = \"Please type a valid character.\"\n                outputElement.innerHTML = err;\n            }\n            else{\n                let outputElement = document.getElementById(\"outputKanji\");\n                let on = result.onyomi_ja; //chinese reading\n                let defintion = result.kanji.meaning.english;\n                let kun = result.kunyomi_ka_display; // japanese reading\n                let words = result.examples; //words that it is in \n                let examples = \"\";\n                for(var x in words){\n                    var max = 5;\n                    examples += x;\n                    max++;\n                }\n            \n                let wordDes = ` \n                <p id= \"def\">  Meaning: ${defintion}</p>\n                <p id= \"on\"> On reading: ${on}</p>\n                <p id= \"kun\"> Kun reading: ${kun}</p> \n                <p id= \"relate\"> Words with this character: ${examples}</p>\n                `; //template string\n                console.log(wordDes);\n                outputElement.innerHTML = wordDes;\n        }\n        }\n        catch(error){\n            console.log(\"there was malfunction\");\n        }\n    } \n    else{\n        console.log(\"Not in base set\");\n    }\n    //store in the cache  \n}\nexport default About;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}