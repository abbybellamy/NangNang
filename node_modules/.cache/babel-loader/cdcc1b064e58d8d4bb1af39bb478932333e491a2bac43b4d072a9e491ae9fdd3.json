{"ast":null,"code":"var _jsxFileName = \"/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport kanjiText from './kanji.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(kanjiText);\nconst About = () => {\n  _s();\n  var map = new Map();\n  initializeSet(map);\n  const [formData, setFormData] = useState({\n    kanji: ''\n  });\n  const handleSubmit = x => {\n    x.preventDefault();\n    console.log('Form submitted:', formData);\n    helper(formData, map);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"about\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"kanjiInput\",\n        children: \" Enter Kanji : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"kanjiInput\",\n        value: formData.kanji,\n        onChange: e => setFormData({\n          kanji: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        children: \" Search \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"learnResult\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 9\n  }, this);\n};\n_s(About, \"7EBMU1XXTAMHPtl/YVUZivfxL5w=\");\n_c = About;\nconst initializeSet = map => {\n  //https://stackoverflow.com/questions/8877666/how-is-a-javascript-hash-map-implemented \n  //hash map ^\n  for (var i in kanjiText) {\n    map.set(i, kanjiText[i]); //set up the hash set from kanji.json\n  }\n};\nconst helper = async (formData, map) => {\n  const submit = formData.kanji;\n  //console.log(\"this is the submit\" + submit);\n  if (map.has(submit)) {\n    let outputElement = document.getElementById(\"learnResult\");\n    let word = map.get(submit);\n    //const res = JSON.parse(word);\n    //alert(JSON.stringify(res, null, 4));// checking the type of something from https://stackoverflow.com/questions/1625208/print-content-of-javascript-object\n    let base = word.base;\n    let freq = word.num;\n    let defsList = [];\n    // const defSplit = defs.split(\",\");\n    for (var x in word.defs) {\n      if (x == 0) {\n        defsList += \"<br>\";\n      }\n      defsList += word.defs[x] + \"<br>\";\n    }\n    console.log(defsList);\n    if (base == null) {\n      base = \"This is a base radical kanji.\";\n    }\n    //alert(JSON.stringify(defsList, null, 4));\n    let wordDes = `\n         <p>${submit}</p>\n         <p>Base: ${base}</p>\n         <p>Rank: ${freq}</p>\n         <p id=\"rads\">Dissection: ${defsList}</p>\n        `;\n    outputElement.innerHTML = wordDes;\n  } else {\n    console.log(\"Not in base set\");\n  }\n};\nexport default About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useState","kanjiText","jsxDEV","_jsxDEV","console","log","About","_s","map","Map","initializeSet","formData","setFormData","kanji","handleSubmit","x","preventDefault","helper","className","children","onSubmit","htmlFor","fileName","_jsxFileName","lineNumber","columnNumber","type","id","value","onChange","e","target","_c","i","set","submit","has","outputElement","document","getElementById","word","get","base","freq","num","defsList","defs","wordDes","innerHTML","$RefreshReg$"],"sources":["/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Learn.js"],"sourcesContent":["import React, {useState} from 'react';\nimport kanjiText from './kanji.json';\n\nconsole.log(kanjiText);\nconst About = () => {\n    var map = new Map();\n    initializeSet(map);\n    const [formData, setFormData] = useState({\n        kanji: ''\n    });\n\n    const handleSubmit = (x) => {\n        x.preventDefault();\n        console.log('Form submitted:', formData);\n        helper(formData, map);\n    };\n\n    return (    \n        <div className = \"about\">\n             <form onSubmit={handleSubmit}>\n                <label htmlFor=\"kanjiInput\"> Enter Kanji : </label>\n                <input\n                    type=\"text\"\n                    id=\"kanjiInput\"\n                    value={formData.kanji}\n                    onChange={(e) => setFormData({ kanji: e.target.value })}\n                />\n                <button type=\"submit\"> Search </button>\n            </form>\n            <div id=\"learnResult\">\n            </div>\n        </div>\n    );\n}\n\nconst initializeSet = (map) => {\n    //https://stackoverflow.com/questions/8877666/how-is-a-javascript-hash-map-implemented \n    //hash map ^\n    for(var i in kanjiText){\n        map.set(i, kanjiText[i]); //set up the hash set from kanji.json\n    }\n}\n\nconst helper = async(formData, map) => {\n    const submit = formData.kanji;\n    //console.log(\"this is the submit\" + submit);\n    if(map.has(submit)){\n        let outputElement = document.getElementById(\"learnResult\");\n        let word = map.get(submit);\n        //const res = JSON.parse(word);\n        //alert(JSON.stringify(res, null, 4));// checking the type of something from https://stackoverflow.com/questions/1625208/print-content-of-javascript-object\n        let base = word.base;\n        let freq = word.num;\n        let defsList = [];\n        // const defSplit = defs.split(\",\");\n        for(var x in word.defs){\n            if(x == 0){\n                defsList += \"<br>\"; \n            }\n            defsList += word.defs[x]+\"<br>\";\n        }\n        console.log(defsList);\n        if(base == null){\n            base = \"This is a base radical kanji.\";\n        }\n        //alert(JSON.stringify(defsList, null, 4));\n        let wordDes = `\n         <p>${submit}</p>\n         <p>Base: ${base}</p>\n         <p>Rank: ${freq}</p>\n         <p id=\"rads\">Dissection: ${defsList}</p>\n        `;\n        outputElement.innerHTML = wordDes;\n    } \n    else{\n        console.log(\"Not in base set\");\n    }\n}\nexport default About;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}