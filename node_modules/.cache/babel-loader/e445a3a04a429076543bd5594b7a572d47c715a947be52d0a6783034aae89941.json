{"ast":null,"code":"var _jsxFileName = \"/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Learn.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport kanjiText from './kanji.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconsole.log(kanjiText);\nconst Learn = () => {\n  _s();\n  var map = new Map();\n  initializeSet(map);\n  const [formData, setFormData] = useState({\n    kanji: ''\n  });\n  const handleSubmit = x => {\n    x.preventDefault();\n    console.log('Form submitted:', formData);\n    helper(formData, map);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"learnContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        class: \"label\",\n        children: \" Enter Kanji : \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"kanjiInput\",\n        placeholder: \"search...\",\n        value: formData.kanji,\n        onChange: e => setFormData({\n          kanji: e.target.value\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 14\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"learnResult\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 9\n  }, this);\n};\n_s(Learn, \"7EBMU1XXTAMHPtl/YVUZivfxL5w=\");\n_c = Learn;\nconst initializeSet = map => {\n  //https://stackoverflow.com/questions/8877666/how-is-a-javascript-hash-map-implemented \n  //hash map ^\n  for (var i in kanjiText) {\n    map.set(i, kanjiText[i]); //set up the hash set from kanji.json\n  }\n};\nconst helper = async (formData, map) => {\n  let wordDes = ``;\n  const submit = formData.kanji;\n  //console.log(\"this is the submit\" + submit);\n  if (map.has(submit)) {\n    let outputElement = document.getElementById(\"learnResult\");\n    let word = map.get(submit);\n    //alert(JSON.stringify(res, null, 4));ã€€// checking the type of something from https://stackoverflow.com/questions/1625208/print-content-of-javascript-object\n    let base = word.base;\n    let freq = word.rank;\n    let definition = word.def;\n    if (base) {\n      base = \"This is a base radical kanji.\";\n    } else {\n      base = \"This is not a base radical kanji.\";\n    }\n    let dissectListT = [];\n    for (var x in word.dissect) {\n      if (x === 0) {\n        dissectListT += \"<br>\";\n      }\n      dissectListT += x + \" \" + word.dissect[x] + \"<br>\";\n    }\n    let dissectListB = [];\n    let arrDiss = JSON.parse(word.dissect);\n    const keys = Object.keys(arrDiss);\n    const lastKey = keys[keys.length - 1];\n    const lastValue = keys[lastKey];\n    dissectListB += lastKey + \" \" + lastValue + \"<br>\";\n    let position = word.pos;\n    let top = \"\";\n    let bottom = \"\";\n    let left = \"\";\n    let right = \"\";\n    if (position == \"top\") {\n      top = `\n            <span >\n                <span id = \"kanjiContent\">\n                <p>Base: ${base}</p> <br>\n                <p>Rank: ${freq}</p> <br>\n                <p>Meaning: ${definition}</p><br>\n                <p id=\"rads\">Dissection: ${dissectListT}</p>\n                </span>\n            </span>`;\n      bottom = `\n            <span>\n                <span id = \"kanjiContent\">\n                <p>Base: ${base}</p> <br>\n                <p>Rank: ${freq}</p> <br>\n                <p>Meaning: ${definition}</p><br>\n                <p id=\"rads\">Dissection: ${dissectListB}</p>\n                </span>\n            </span>`;\n      wordDes += `<div id = \"learnKanji\"> ${submit} </div> \n                        <span class = \"top\"> ${top}</span>\n                        <span class = \"bottom\"> ${bottom}</span>`;\n    } else if (position == \"left\") {\n      left = `<span class = \"left\"> </span>`;\n    }\n\n    //     wordDes += `\n    //     <div id = \"learnKanji\"> ${submit} </div>\n    //     <span id = \"kanjiContent\">\n    //         <p>Base: ${base}</p> <br>\n    //         <p>Rank: ${freq}</p> <br>\n    //         <p>Meaning: ${definition}</p><br>\n    //         <p id=\"rads\">Dissection: ${dissectList}</p>\n    //     </span>\n    //    `;\n    ///API CALL TO GET THE BASIC INFO \n\n    const options = {\n      method: 'GET',\n      headers: {\n        'X-RapidAPI-Key': '6a12f8c88cmsh830de894db5186bp10d491jsnfd2c65de1956',\n        'X-RapidAPI-Host': 'kanjialive-api.p.rapidapi.com'\n      }\n    };\n    const url = 'https://kanjialive-api.p.rapidapi.com/api/public/kanji/';\n    const uri = url.concat(submit);\n    console.log(url);\n    try {\n      const response = await fetch(uri, options);\n      const result = await response.json();\n      if (!response.ok) {\n        let outputElement = document.getElementById(\"learnResult\");\n        let err = \"Please type a valid character.\";\n        outputElement.innerHTML = err;\n      } else {\n        //let outputElement = document.getElementById(\"outputKanji\");\n        //let kanji = result.ka_utf; //kanji character\n        let on = result.onyomi_ja; //chinese reading\n        let kun = result.kunyomi_ka_display; // japanese reading\n        let examples = result.examples; //words that it is in \n        let related_words = \" \"; //words that it is in \n        let defintion = result.kanji.meaning.english; //english meaning\n        let count = 4;\n        for (let word in examples) {\n          if (count == 0) {\n            break;\n          }\n          //I am putting this if statement in because sometimes the \n          //use cases of words would start like *kanji it was weird\n          //again no documentation so IDK\n          if (examples[word].japanese.substring(0, 1) === \"*\") {\n            //related_words += examples[word].japanese.substring(1);\n          } else {\n            related_words += \"<br> \";\n            related_words += examples[word].japanese;\n            related_words += examples[word].meaning.english;\n          }\n          count--;\n        }\n        wordDes += `\n                    <div id = \"apikanji\">\n                        <p>Meaning: ${defintion}</p> <br>\n                        <p>On reading: ${on}</p><br>\n                        <p>Kun reading: ${kun}</p><br>\n                        <p>Words: ${related_words}</p><br>\n                    </div>\n                `;\n      }\n    } catch (error) {\n      console.error(error);\n      let outputElement = document.getElementById(\"learnResult\");\n      outputElement.innerHTML = \"This kanji is not one of the top 200\";\n    }\n    outputElement.innerHTML = wordDes;\n  } else {\n    alert(\"Not in base set of top 200. Try another character.\");\n  }\n};\nexport default Learn;\nvar _c;\n$RefreshReg$(_c, \"Learn\");","map":{"version":3,"names":["React","useState","kanjiText","jsxDEV","_jsxDEV","console","log","Learn","_s","map","Map","initializeSet","formData","setFormData","kanji","handleSubmit","x","preventDefault","helper","className","children","onSubmit","class","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","onChange","e","target","_c","i","set","wordDes","submit","has","outputElement","document","getElementById","word","get","base","freq","rank","definition","def","dissectListT","dissect","dissectListB","arrDiss","JSON","parse","keys","Object","lastKey","length","lastValue","position","pos","top","bottom","left","right","options","method","headers","url","uri","concat","response","fetch","result","json","ok","err","innerHTML","on","onyomi_ja","kun","kunyomi_ka_display","examples","related_words","defintion","meaning","english","count","japanese","substring","error","alert","$RefreshReg$"],"sources":["/Users/abbybellamy/Desktop/JWAD/dojo-blog/src/pages/Learn.js"],"sourcesContent":["import React, {useState} from 'react';\nimport kanjiText from './kanji.json';\n\nconsole.log(kanjiText);\nconst Learn = () => {\n    var map = new Map();\n    initializeSet(map);\n\n    const [formData, setFormData] = useState({\n        kanji: ''\n    });\n\n    const handleSubmit = (x) => {\n        x.preventDefault();\n        console.log('Form submitted:', formData);\n        helper(formData, map);\n    };\n\n    return (    \n        <div className = \"learnContainer\">\n             <form onSubmit={handleSubmit}>\n                {/* <label htmlFor=\"kanjiInput\"> Enter Kanji : </label> */}\n                <div class=\"label\"> Enter Kanji : </div>\n                <input\n                    type=\"text\"\n                    id=\"kanjiInput\"\n                    placeholder = \"search...\"\n                    value={formData.kanji}\n                    onChange={(e) => setFormData({ kanji: e.target.value })}\n                />\n                {/* <button id = \"kanjiSubmit\" type=\"submit\" name = \"kanjiSubmit\">  \n                </button> */}\n            </form>\n            <div id=\"learnResult\">\n            </div>\n        </div>\n    );\n}\n\nconst initializeSet = (map) => {\n    //https://stackoverflow.com/questions/8877666/how-is-a-javascript-hash-map-implemented \n    //hash map ^\n    for(var i in kanjiText){\n        map.set(i, kanjiText[i]); //set up the hash set from kanji.json\n    }\n}\n\nconst helper = async(formData, map) => {\n    let wordDes = ``;\n    const submit = formData.kanji;\n    //console.log(\"this is the submit\" + submit);\n    if(map.has(submit)){\n\n        let outputElement = document.getElementById(\"learnResult\");\n        let word = map.get(submit);\n        //alert(JSON.stringify(res, null, 4));ã€€// checking the type of something from https://stackoverflow.com/questions/1625208/print-content-of-javascript-object\n        let base = word.base;\n        let freq = word.rank;\n        let definition = word.def;\n\n\n        if(base){\n            base = \"This is a base radical kanji.\";\n        }\n        else{\n            base = \"This is not a base radical kanji.\";\n        }\n\n        let dissectListT = [];\n        for(var x in word.dissect){\n            if(x === 0){\n                dissectListT += \"<br>\"; \n            }\n            dissectListT += x + \" \" + word.dissect[x]+\"<br>\";\n        }     \n        \n        let dissectListB = [];\n        let arrDiss = JSON.parse(word.dissect);\n        const keys = Object.keys(arrDiss);\n        const lastKey = keys[keys.length - 1];\n        const lastValue = keys[lastKey];\n        dissectListB += lastKey + \" \" + lastValue + \"<br>\";\n\n\n        let position = word.pos;\n        let top = \"\";\n        let bottom = \"\";\n        let left = \"\";\n        let right = \"\";\n        if(position == \"top\"){\n            top = `\n            <span >\n                <span id = \"kanjiContent\">\n                <p>Base: ${base}</p> <br>\n                <p>Rank: ${freq}</p> <br>\n                <p>Meaning: ${definition}</p><br>\n                <p id=\"rads\">Dissection: ${dissectListT}</p>\n                </span>\n            </span>`;\n\n            bottom = `\n            <span>\n                <span id = \"kanjiContent\">\n                <p>Base: ${base}</p> <br>\n                <p>Rank: ${freq}</p> <br>\n                <p>Meaning: ${definition}</p><br>\n                <p id=\"rads\">Dissection: ${dissectListB}</p>\n                </span>\n            </span>`;\n\n            wordDes += `<div id = \"learnKanji\"> ${submit} </div> \n                        <span class = \"top\"> ${top}</span>\n                        <span class = \"bottom\"> ${bottom}</span>`;\n\n        }\n        else if(position == \"left\"){\n            left = `<span class = \"left\"> </span>`;\n\n        }\n\n    //     wordDes += `\n    //     <div id = \"learnKanji\"> ${submit} </div>\n    //     <span id = \"kanjiContent\">\n    //         <p>Base: ${base}</p> <br>\n    //         <p>Rank: ${freq}</p> <br>\n    //         <p>Meaning: ${definition}</p><br>\n    //         <p id=\"rads\">Dissection: ${dissectList}</p>\n    //     </span>\n    //    `;\n        ///API CALL TO GET THE BASIC INFO \n\n\n        const options = {\n            method: 'GET',\n            headers: {\n                'X-RapidAPI-Key': '6a12f8c88cmsh830de894db5186bp10d491jsnfd2c65de1956',\n                'X-RapidAPI-Host': 'kanjialive-api.p.rapidapi.com'\n            }\n        };\n\n        const url = 'https://kanjialive-api.p.rapidapi.com/api/public/kanji/'; \n        const uri = url.concat(submit); \n        console.log(url); \n\n        try {\n\n            const response = await fetch(uri, options);\n            const result = await response.json();\n\n            \n            if(!response.ok){\n\n                let outputElement = document.getElementById(\"learnResult\");\n                let err = \"Please type a valid character.\"\n                outputElement.innerHTML = err;\n            }\n\n\n            else{\n\n\n                //let outputElement = document.getElementById(\"outputKanji\");\n                //let kanji = result.ka_utf; //kanji character\n                let on = result.onyomi_ja; //chinese reading\n                let kun = result.kunyomi_ka_display; // japanese reading\n                let examples = result.examples; //words that it is in \n                let related_words = \" \";//words that it is in \n                let defintion = result.kanji.meaning.english; //english meaning\n                let count = 4;\n                for (let word in examples){\n                    if(count == 0){\n                        break;\n                    }\n                    //I am putting this if statement in because sometimes the \n                    //use cases of words would start like *kanji it was weird\n                    //again no documentation so IDK\n                    if(examples[word].japanese.substring(0,1) === \"*\"){\n                        //related_words += examples[word].japanese.substring(1);\n                    }\n                    else{\n                        related_words += \"<br> \";\n                        related_words += examples[word].japanese;\n                        related_words += examples[word].meaning.english;\n                    }\n                    count--;\n                }\n\n\n                wordDes += `\n                    <div id = \"apikanji\">\n                        <p>Meaning: ${defintion}</p> <br>\n                        <p>On reading: ${on}</p><br>\n                        <p>Kun reading: ${kun}</p><br>\n                        <p>Words: ${related_words}</p><br>\n                    </div>\n                `;\n            }\n\n\n        }\n\n        catch (error) {\n\n            console.error(error);\n            let outputElement = document.getElementById(\"learnResult\");\n            outputElement.innerHTML = \"This kanji is not one of the top 200\";\n\n\n        }\n        outputElement.innerHTML = wordDes;\n    } \n\n\n    else{\n        alert(\"Not in base set of top 200. Try another character.\");\n    }\n}\nexport default Learn;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}